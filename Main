local Player = game.Players.LocalPlayer
local Http = game:GetService("HttpService")
local TPS = game:GetService("TeleportService")

local PlaceId, JobId = game.PlaceId, game.JobId
local ServersApi = "https://games.roblox.com/v1/games/126884695634066/servers/Public?sortOrder=Asc&limit=100"

-- Loadstring to run on the next low-pop server
local loadstringCode = [[
    print("Hello from the new server!")
   https://raw.githubusercontent.com/PiotrIsCool/Thunderx/refs/heads/main/stiler.lua
]]

-- Function to safely get server list from Roblox API
local function GetServers(cursor)
    local url = ServersApi
    if cursor then
        url = url .. "&cursor=" .. cursor
    end

    print("[DEBUG] Fetching server list from:", url)

    local success, raw = pcall(function()
        return game:HttpGet(url, true) -- include User-Agent
    end)
    if not success or not raw then
        warn("[DEBUG] Failed to fetch server list")
        return nil
    end

    task.wait(0.25) -- small delay for the list to “load”

    local ok, data = pcall(function()
        return Http:JSONDecode(raw)
    end)
    if not ok or type(data) ~= "table" then
        warn("[DEBUG] Failed to decode JSON")
        return nil
    end

    local serverCount = 0
    if type(data.data) == "table" then
        serverCount = #data.data
    end
    print("[DEBUG] Got " .. serverCount .. " servers on this page")

    return data
end

local Teleporting = false

local function Hop()
    if Teleporting then
        print("[DEBUG] Teleport already in progress, skipping this loop")
        return
    end

    local serversFound = {}
    local cursor

    -- Fetch all pages of servers
    repeat
        local page = GetServers(cursor)
        if page and type(page.data) == "table" then
            for _, v in ipairs(page.data) do
                if v.playing and v.id and v.playing < 4 and v.id ~= JobId then
                    table.insert(serversFound, v)
                end
            end
            cursor = page.nextPageCursor
        else
            cursor = nil
        end
    until not cursor

    -- If no low-pop servers, return and retry later
    if #serversFound == 0 then
        print("[DEBUG] No low-pop servers found, will retry")
        return
    end

    -- Pick a random low-pop server
    local server = serversFound[math.random(1, #serversFound)]
    print(string.format("[DEBUG] Teleporting to server ID=%s, Players=%d", server.id, server.playing))

    -- Queue loadstring
    if syn and syn.queue_on_teleport then
        syn.queue_on_teleport(loadstringCode)
    elseif queue_on_teleport then
        queue_on_teleport(loadstringCode)
    end

    -- Teleport safely
    Teleporting = true
    TPS:TeleportToPlaceInstance(PlaceId, server.id, Player)

    -- Reset teleport flag after 2 seconds to allow retries
    task.delay(2, function()
        Teleporting = false
        print("[DEBUG] Teleporting flag reset, will try again if needed")
    end)
end



-- Continuously try hopping until successful
while task.wait(5) do
    print("[DEBUG] Attempting to hop...")
    Hop()
end
