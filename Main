local Player = game.Players.LocalPlayer
local Http = game:GetService("HttpService")
local TPS = game:GetService("TeleportService")

-- Roblox Games API setup
local PlaceId, JobId = game.PlaceId, game.JobId
local ServersApi = "https://games.roblox.com/v1/games/" .. PlaceId .. "/servers/Public?sortOrder=Desc&limit=100"

-- Loadstring to run on next low-pop server
local loadstringCode = [[
    print("Hello from the new server!")
    -- Add your full exploit/loadstring here
]]

-- Function to safely get server list from Roblox API
local function GetServers(cursor)
    local url = ServersApi
    if cursor then
        url = url .. "&cursor=" .. cursor
    end

    local success, raw = pcall(function()
        -- Use 'true' to include a valid User-Agent
        return game:HttpGet(url, true)
    end)
    if not success or not raw then
        warn("Failed to fetch server list")
        return nil
    end

    local ok, data = pcall(function()
        return Http:JSONDecode(raw)
    end)
    if not ok or type(data) ~= "table" then
        warn("Failed to decode JSON")
        return nil
    end

    return data
end

-- Hop into a low-population server
local function Hop()
    local cursor
    repeat
        local servers = GetServers(cursor)
        if type(servers) == "table" and type(servers.data) == "table" then
            for _, v in ipairs(servers.data) do
                if v.playing and v.id and v.playing < 4 and v.id ~= JobId then
                    -- Queue loadstring only for low-pop servers
                    if syn and syn.queue_on_teleport then
                        syn.queue_on_teleport(loadstringCode)
                    elseif queue_on_teleport then
                        queue_on_teleport(loadstringCode)
                    end

                    TPS:TeleportToPlaceInstance(PlaceId, v.id, Player)
                    return
                end
            end
            cursor = servers.nextPageCursor
        else
            cursor = nil -- exit loop if no valid data
        end
    until not cursor
end

-- Continuously try hopping until successful
while task.wait(2) do
    Hop()
end
