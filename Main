local Player = game.Players.LocalPlayer
local Http = game:GetService("HttpService")
local TPS = game:GetService("TeleportService")

local Api = "https://games.roblox.com/v1/games/"
local PlaceId, JobId = game.PlaceId, game.JobId
local ServersApi = Api .. PlaceId .. "/servers/Public?sortOrder=Desc&limit=100"

local loadstringCode = [[
    print("Hello from the new server!")
    -- Add your full exploit/loadstring here
]]

local function GetServers(cursor)
    local success, raw = pcall(function()
        return game:HttpGet(ServersApi .. (cursor and "&cursor=" .. cursor or ""))
    end)
    if not success then
        warn("Failed to fetch server list")
        return nil
    end

    local ok, data = pcall(function()
        return Http:JSONDecode(raw)
    end)
    if not ok then
        warn("Failed to decode JSON")
        return nil
    end

    return data
end

local function Hop()
    local cursor
    repeat
        local servers = GetServers(cursor)
        if servers and servers.data then
            for _, v in ipairs(servers.data) do
                if v.playing < 4 and v.id ~= JobId then
                    -- Queue only for low-pop servers
                    if syn and syn.queue_on_teleport then
                        syn.queue_on_teleport(loadstringCode)
                    elseif queue_on_teleport then
                        queue_on_teleport(loadstringCode)
                    end

                    TPS:TeleportToPlaceInstance(PlaceId, v.id, Player)
                    return
                end
            end
            cursor = servers.nextPageCursor
        else
            break -- no data returned, exit loop
        end
    until not cursor
end

while task.wait(2) do
    Hop()
end
